<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC 
			"-//mybatis.org//DTD Mapper 3.0//EN" 
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
			
<mapper namespace="com.itbank.member.MemberDAO">

<!-- ============= 고객이메일 아이디 리스티 ================== -->
	<select id="listAll" resultType="member" >
		select member_email from member
			where member_deleted = 'n'
			</select>

			
	<select id="list"  parameterType="String"  resultType="member" >
		select member_email from member
			<if test="keyword!=null and keyword.equals('')==false">
		  	 		where member_grade = #{listType}
		 	 	</if>
			
	</select>



<!-- ============고객관리 페이지 리스트================== -->
	<select id="customerDeletedList" resultType="member" parameterType="hashmap">
		select * from member_del
				<if test="keyword!=null and keyword.equals('')==false">
		  	 		where ${search} like '%${keyword}%'
		 	 	</if>
  	 	order by 
  	 			<choose>
  	 				<when test="sorted.equals('desc')">
					member_date desc
					</when>
					<otherwise>
					member_date asc
					</otherwise>
				</choose>
		offset ${offset} rows
	 		fetch first ${perPage} rows only
	</select>


	<select id="customerLastList" resultType="member" parameterType="hashmap">
		select * from member
				<if test="keyword!=null and keyword.equals('')==false">
		  	 		where ${search} like '%${keyword}%'
		 	 	</if>
  	 	order by 
			<choose>
  	 				<when test="sorted == 1 ">
					amount_last desc,
					</when>
					<otherwise>
					amount_last asc,
					</otherwise>
				</choose>
				member_date desc
		offset ${offset} rows
	 		fetch first ${perPage} rows only
	</select>


	<select id="customerThisList" resultType="member" parameterType="hashmap">
		select * from member
				<if test="keyword!=null and keyword.equals('')==false">
		  	 		where ${search} like '%${keyword}%'
		 	 	</if>
  	 	order by 
  	 	
  	 		<choose>
  	 				<when test="sorted == 1 ">
					amount_this desc,
					</when>
					<otherwise>
					amount_this asc,
					</otherwise>
				</choose>
				member_date desc
		offset ${offset} rows
	 		fetch first ${perPage} rows only
	</select>

	<select id="customerDateList" resultType="member" parameterType="hashmap">
		select * from member
				<if test="keyword!=null and keyword.equals('')==false">
		  	 		where ${search} like '%${keyword}%'
		 	 	</if>
  	 	order by 
  	 		<choose>
  	 				<when test="sorted == 1 ">
					member_date desc
					</when>
					<otherwise>
					member_date asc
					</otherwise>
				</choose>
		offset ${offset} rows
	 		fetch first ${perPage} rows only
	</select>

		<select id="customerGradeList" resultType="member" parameterType="hashmap">
		select * from member
				<if test="keyword!=null and keyword.equals('')==false">
		  	 		where ${search} like '%${keyword}%'
		 	 	</if>
  	 	order by 
  	 		<choose>
  	 			<when test="sorted == 1 ">
				  	 	decode(member_grade, 'P', 1, 'G', 2, 'V', 3, 'N', 4) desc,
				</when>
				<otherwise>
				  	 	decode(member_grade, 'P', 1, 'G', 2, 'V', 3, 'N', 4) asc,
				</otherwise>
			</choose>
				member_date desc
  	 	
		offset ${offset} rows
	 		fetch first ${perPage} rows only
	</select>
	



	<insert id="insert" parameterType="member">
	insert into member(
   		 member_number, member_email, member_name, member_password, member_nick, member_phone, member_addr1, member_addr2,  member_gender   
		)
	values(
   		 #{member_number} || to_char(member_seq.nextval,'FM00000'), #{member_email}, #{member_name}, #{member_password}, #{member_nick}, #{member_phone}, #{member_addr1}, #{member_addr2} , #{member_gender}
		)
	
	</insert>
	
	
	<select id="selectOne" resultType="member" parameterType="member">
	select * from member
		where
			member_email = #{member_email}
			and
			member_password = #{member_password}
	
	</select>
	
	<select id="selectOne2" resultType="member" parameterType="member">
	select * from member
		where
			member_email = #{member_email}
	</select>
	
	
	<update id="modify" parameterType="member">	
		update member set
			member_nick = #{member_nick},
			member_phone = #{member_phone},
			member_addr1 = #{member_addr1},
			member_addr2 = #{member_addr2},
			member_gender = #{member_gender}
		where
			member_email = #{member_email}
	</update>
	
	<update id="modifyPw" parameterType="member">
		update member set
			member_password = #{member_password}
		where
			member_email = #{member_email}
	
	</update>

	
	<insert id="insertDelMember" parameterType="member">
		insert into member_del
			(member_number,member_email, member_name, member_password, member_phone, member_addr1, member_addr2, member_gender,
    		member_nick , member_grade, amount_this, amount_last, member_date)
    		(select 
    		member_number, member_email, member_name, member_password, member_phone, member_addr1, member_addr2, member_gender,
		    member_nick, member_grade, amount_this, amount_last, member_date
			from member where member_email = #{member_email})
	
	</insert>


</mapper>





